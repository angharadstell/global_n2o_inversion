#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Apr 14 16:10:05 2021

@author: as16992
"""
import configparser
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import xarray as xr

# read in variables from the config file
config = configparser.ConfigParser()
config.read(Path(__file__).parent.parent.parent / 'config.ini')
GEOS_EMS = Path(config["em_n_loss"]["geos_ems"])
GEOS_INT = Path(config["paths"]["geos_inte"])
PERTURB_START = config["dates"]["perturb_start"]
PERTURB_END = config["dates"]["perturb_end"]
N_REGIONS = int(config["inversion_constants"]["no_regions"]) + 1

# =============================================================================
# Functions
# =============================================================================  

def month_diff(a, b):
    return 12 * abs(a.year - b.year) + abs(a.month - b.month)

def rescale_ems(ems, alphas_reshaped, n_regions):
    # create new post_ems
    post_ems = ems.copy()

    # rescale emissions
    post_ems["emi_n2o"] = 0
    for i in range(n_regions):
        mask_i = xr.DataArray(alphas_reshaped[:, i], dims="time") 
        post_ems[f"emi_R{i:02d}"] = ems[f"emi_R{i:02d}"] * (1 + mask_i)
        post_ems["emi_n2o"] = post_ems["emi_n2o"] + post_ems[f"emi_R{i:02d}"]

    return post_ems

# =============================================================================
# Execute
# ============================================================================= 

if __name__ == "__main__":
    # read in prior ems
    with xr.open_dataset(GEOS_EMS / "base_emissions_tagged.nc") as load:
        ems = load.load()

    # only interested in resolved years
    ems = ems.where(ems.time >= pd.to_datetime(PERTURB_START), drop=True)
    ems = ems.where(ems.time < pd.to_datetime(PERTURB_END), drop=True)

    # read in scaling factors (generated by extract_alphas.R)
    method = "mcmc"
    case = "IS-RHO0-VARYA-VARYW-NOBIAS-model-err-n2o_std"
    alphas = pd.read_csv(GEOS_INT / f"alphas-{method}-{case}.csv", index_col=0)
    # reshape so that each region's scaling factor is clear
    n_months = month_diff(pd.to_datetime(PERTURB_END), pd.to_datetime(PERTURB_START))
    alphas_reshaped = np.reshape(alphas["value"].to_numpy(), (n_months, N_REGIONS))

    # rescale emissions
    post_ems = rescale_ems(ems, alphas_reshaped, N_REGIONS)

    # Multiplication ruins units
    post_ems["emi_n2o"].attrs["units"] = "kg/m2/s"
    for region in range(0, len(ems.keys())-1):
        post_ems[f"emi_R{region:02d}"].attrs["units"] = "kg/m2/s"

    # plot to check it makes sense
    plt.plot(ems["emi_n2o"].sum(["lat", "lon"]), label="prior")
    plt.plot(post_ems["emi_n2o"].sum(["lat", "lon"]), label="post")
    plt.legend()
    plt.show()

    # save
    post_ems.to_netcdf(GEOS_EMS / f"ems_posterior.nc")
    